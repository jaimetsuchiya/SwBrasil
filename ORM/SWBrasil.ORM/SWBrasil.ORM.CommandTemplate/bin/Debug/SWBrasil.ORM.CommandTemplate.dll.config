<?xml version="1.0" encoding="utf-8" ?>
<configuration>
    <configSections>
        <sectionGroup name="applicationSettings" type="System.Configuration.ApplicationSettingsGroup, System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" >
            <section name="SWBrasil.ORM.CommandTemplate.Templates" type="System.Configuration.ClientSettingsSection, System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" requirePermission="false" />
        </sectionGroup>
    
    </configSections>
    <applicationSettings>
        <SWBrasil.ORM.CommandTemplate.Templates>
            <setting name="Procedure_Select" serializeAs="String">
                <value>
SELECT 
	{0}
FROM
	{1}
WHERE
	{2}</value>
            </setting>
            <setting name="Procedure_Delete" serializeAs="String">
                <value>DELETE FROM {0} WHERE {1}</value>
            </setting>
            <setting name="Procedure_Base" serializeAs="String">
                <value>IF EXISTS ( SELECT 1 FROM sys.objects WHERE type='P' AND name='{0}')
	DROP PROC {0}
GO


CREATE PROC dbo.{0} 
(
	{1}
	,@AbreTransacao		char(1)		= 'N'
	,@CodigoRetorno		int			=  0	output
	,@DescricaoRetorno	varchar(max)= ''	output
) AS
BEGIN

	DECLARE @TransacaoAberta char(1)
		SET @TransacaoAberta = 'N'

	BEGIN TRY

		IF @AbreTransacao = 'S'
		BEGIN
			BEGIN TRAN 
			SET @TransacaoAberta = 'S'
		END


		{2}


		SELECT 	 @CodigoRetorno		= 0
				,@DescricaoRetorno	= ''


		IF @TransacaoAberta = 'S'
		BEGIN
			COMMIT TRAN
			SET @TransacaoAberta = 'N'
		END

	END TRY
	BEGIN CATCH

		SELECT 	 @CodigoRetorno		= -9
				,@DescricaoRetorno	= 'Erro de Processamento'
				

		IF @TransacaoAberta = 'S'
		BEGIN
			ROLLBACK TRAN
			SET @TransacaoAberta = 'N'
		END

	END CATCH

END
GO
</value>
            </setting>
            <setting name="Procedure_Save" serializeAs="String">
                <value>
--SAVE
IF EXISTS( SELECT 1 FROM {0} WHERE {1})
BEGIN

	UPDATE
		{0}
	SET
		{2}
	WHERE
		{1}

END
ELSE
BEGIN

	INSERT
		INTO {0}
		(
			{3}
		)
		VALUES
		(
			{4}
		)

	{5}

END</value>
            </setting>
            <setting name="NapierModel" serializeAs="String">
                <value>
[MapperClass(Storable = "{0}")]
    public class {0} : DataAccessLibrary
    {
        
        {1}

        #region Persistence Methods

        public new int Save()
        {
            return base.Save();
        }

        public new int Delete()
        {
            return base.Delete();
        }

        #endregion Persistence Methods
		
		#region Search Methods
		
		{2}

		#endregion Search Methods
    }</value>
            </setting>
            <setting name="Napier_Execution_XML" serializeAs="String">
                <value>

&lt;Storable name="mcs{0}"&gt;
    &lt;Execution cod="SEL"&gt;
      &lt;Summary&gt;SEL Summary&lt;/Summary&gt;
      &lt;Table&gt;{0}&lt;/Table&gt;
      &lt;Inputs&gt;
       {1}
      &lt;/Inputs&gt;
    &lt;/Execution&gt;
    &lt;Execution cod="INS"&gt;
      &lt;Summary&gt;INS Summary&lt;/Summary&gt;
      &lt;Table&gt;{0}&lt;/Table&gt;
      &lt;Inputs&gt;
        {2}
      &lt;/Inputs&gt;
    &lt;/Execution&gt;
    &lt;Execution cod="UPD"&gt;
      &lt;Summary&gt;UPD Summary&lt;/Summary&gt;
      &lt;Table&gt;{0}&lt;/Table&gt;
      &lt;Inputs&gt;
        {1}
      &lt;/Inputs&gt;
    &lt;/Execution&gt;
    &lt;Execution cod="DEL"&gt;
      &lt;Summary&gt;DEL Summary&lt;/Summary&gt;
      &lt;Table&gt;{0}&lt;/Table&gt;
      &lt;Inputs&gt;
        {3}
      &lt;/Inputs&gt;
    &lt;/Execution&gt;
  &lt;/Storable&gt;

</value>
            </setting>
            <setting name="HtmlInput" serializeAs="String">
                <value>
&lt;div class="form-group"&gt;
	&lt;label for="{0}"&gt;{0}&lt;/label&gt;&lt;br /&gt;
	&lt;input value="@Model.{0}" type="text" id="{0}" name="{0}"  class="form-control" {1} /&gt;
&lt;/div&gt;
</value>
            </setting>
            <setting name="DTOModel" serializeAs="String">
                <value>[NapierClassMapper("{2}")]
public class {0}
{
	{1}
}
</value>
            </setting>
            <setting name="RESTController" serializeAs="String">
                <value>
        [HttpGet]
        [Route("api/{GROUP}/{TABLE_NAME}/{id}")]
        [ResponseType(typeof(OutputTransport&lt;{TABLE_NAME}DTO&gt;))]
        [TokenValidation]
        public HttpResponseMessage Get{TABLE_NAME}(object id)
        {
            OutputTransport&lt;{TABLE_NAME}DTO&gt; ret = new OutputTransport&lt;{TABLE_NAME}DTO&gt;();
            ret.Data = _{TABLE_NAME}BO.FindById(id);

            return Request.CreateResponse&lt;OutputTransport&lt;{TABLE_NAME}DTO&gt;&gt;(HttpStatusCode.OK, ret);
        }

		
        [HttpPost]
        [Route("api/{GROUP}/{TABLE_NAME}/Search")]
        [ResponseType(typeof(OutputTransport&lt;List&lt;{TABLE_NAME}DTO&gt;&gt;))]
        [TokenValidation]
        public HttpResponseMessage Search{TABLE_NAME}s({TABLE_NAME}Args args)
        {
            OutputTransport&lt;List&lt;{TABLE_NAME}DTO&gt;&gt; ret = new OutputTransport&lt;List&lt;{TABLE_NAME}DTO&gt;&gt;();
            ret.Data = _{TABLE_NAME}BO.Search(args);

            return Request.CreateResponse&lt;OutputTransport&lt;List&lt;{TABLE_NAME}DTO&gt;&gt;&gt;(HttpStatusCode.OK, ret);
        }
		
		
        [HttpPost]
        [Route("api/{GROUP}/{TABLE_NAME}")]
        [ResponseType(typeof(OutputTransport&lt;List&lt;{TABLE_NAME}DTO&gt;&gt;))]
        [TokenValidation]
		[ModelValidationHandling()]
        public HttpResponseMessage Save{TABLE_NAME}s({TABLE_NAME}DTO model)
        {
            OutputTransport&lt;{TABLE_NAME}DTO&gt; ret = new OutputTransport&lt;{TABLE_NAME}DTO&gt;();
			ret = _{TABLE_NAME}BO.Salvar(new InputTransport&lt;{TABLE_NAME}DTO&gt;() { Data = model, UserName = base.UserInfo.logon });

            return Request.CreateResponse&lt;OutputTransport&lt;{TABLE_NAME}DTO&gt;&gt;(HttpStatusCode.OK, ret);
        }
</value>
            </setting>
            <setting name="PROXYMethods" serializeAs="String">
                <value>public class {TABLE_NAME}Proxy : BaseProxy
{
	public OutputTransport&lt;{TABLE_NAME}DTO&gt; Get{TABLE_NAME}(object id)
	{
		OutputTransport&lt;{TABLE_NAME}DTO&gt; ret = new OutputTransport&lt;{TABLE_NAME}DTO&gt;();
		string  uri = base.ServiceBaseURI("ServiceURI.{GROUP}");
		uri += "{TABLE_NAME}";

		string content = DoRequest(uri, "GET", null);
		if (string.IsNullOrEmpty(content) == false)
			ret = JsonConvert.DeserializeObject&lt;OutputTransport&lt;{TABLE_NAME}DTO&gt;&gt;(content);
		else
			ret.Code = -100;

		return ret;
	}	
	
	public OutputTransport&lt;{TABLE_NAME}DTO&gt; Search{TABLE_NAME}({TABLE_NAME}Args args)
	{
		string jsonString = JsonConvert.SerializeObject(args);
        StringContent strContent = new StringContent(jsonString, System.Text.Encoding.UTF8, "application/json");

		OutputTransport&lt;{TABLE_NAME}DTO&gt; ret = new OutputTransport&lt;{TABLE_NAME}DTO&gt;();
		string  uri = base.ServiceBaseURI("ServiceURI.{GROUP}");
		uri += "{TABLE_NAME}/Search";

		string content = DoRequest(uri, "POST", strContent);
		if (string.IsNullOrEmpty(content) == false)
			ret = JsonConvert.DeserializeObject&lt;OutputTransport&lt;{TABLE_NAME}DTO&gt;&gt;(content);
		else
			ret.Code = -100;

		return ret;
	}	
	
	public OutputTransport&lt;{TABLE_NAME}DTO&gt; Save{TABLE_NAME}({TABLE_NAME}DTO model)
	{
		string jsonString = JsonConvert.SerializeObject(model);
        StringContent strContent = new StringContent(jsonString, System.Text.Encoding.UTF8, "application/json");

		OutputTransport&lt;{TABLE_NAME}DTO&gt; ret = new OutputTransport&lt;{TABLE_NAME}DTO&gt;();
		string  uri = base.ServiceBaseURI("ServiceURI.{GROUP}");
		uri += "{TABLE_NAME}";

		string content = DoRequest(uri, "POST", strContent);
		if (string.IsNullOrEmpty(content) == false)
		{
                try
                {
                    OutputTransport&lt;{TABLE_NAME}DTO&gt; ret = JsonConvert.DeserializeObject&lt;OutputTransport&lt;{TABLE_NAME}DTO&gt;&gt;(content);
                    return ret;
                }
                catch
                {
                    OutputTransport&lt;string&gt; tmp = JsonConvert.DeserializeObject&lt;OutputTransport&lt;string&gt;&gt;(content);
                    return new OutputTransport&lt;{TABLE_NAME}DTO&gt;() { Code = tmp.Code, Message = tmp.Message + "\n" + tmp.Data };
                }
            }
		else
			ret.Code = -10;

		return ret;
	}	
	
		
}</value>
            </setting>
        </SWBrasil.ORM.CommandTemplate.Templates>
    </applicationSettings>

</configuration>